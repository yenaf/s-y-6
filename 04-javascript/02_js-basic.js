// 1. 
// 변수선언 : 변수 정의
// 변수 할당 : = 이라는 연산자를 이용해 값을 넣음
// 초기화 : 변수에 처음 할당하는 순간

/* 
  1) var
  선언단계와 초기화 할당단계가 동시에 진행이 되며 , 초기화에는 undefined 값이 들어간다.
  중복선언, 재선언이 가능하며, 예기치 못한 값을 반환 할수 있음.
  선언 이전에 참조하면 언제나 undefined를 반환한다.
  
  문제점
  중간에 같은 이름의 변수를 다시 선언해도 기존에 변수에 덮어 씌움
  변수를 선언 했다는 것은 분명히 다른 데이터를 넣으려는 것인데  그것을 기존의 데이터에 덮어씌우면 기존데이터 사라짐 -> 문제발생
  변수가 {블록단위} 에서 끝나는 것이 아니라, 자기 마음대로 전역으로 돌아다니면서 영향력을 행사한다. ->문제발생
  호이스팅 문제
  따라서 ES6문법 부터는 var대신 let 사용을 권장한다

  2) let
  let 키워드로는 변수 중복 선언이 불가능 하지만, 재할당이 가능하다.

  3) const
  재선언이 불가능하고, 재할당이 불가능 하다.
  초반에 선언을 할때 반드시 초기화를 동시에 진행해야 한다.
  변수 선언과 할당이 반드시 동시에
  변하지 않는 상수값을 변수에 저장할때 사용

  * let, const키워드는 호이스팅을 줄이고 블록스코프를 제공하여 변수의 유효 범위를 명확히 함.

*/

// 2. 
// var
var a;//변수 선언
console.log(a);//undefined : 값을 할당하지 않았음
a=2;
console.log(a);//2 -> 변수값 출력 

//let
let b;
console.log(b);
b=7;
console.log(b);

let b2=77;
console.log(b2);
//let b2=78; //let 키워드는 중복선언 불가능


//const
const c=3;
console.log(c);


/* 
  호이스팅
  자바스크립트에서 변수 및 함수 선언이 코드의 최상단으로 올려지는 현상
  변수와 함수의 선언이 실제 코드의 실행전에 처리
  이는 코드를 이해하고 예측하는데 혼란을 줄 수 있음
*/
console.log(x);//undefined -> 선언을 하지 않았는데 에러가 뜨지않고 값이 없다고 뜸.
var x=10;
console.log(x);

//변수 x가 선언되기 전에 사용 되었지만 js 엔진은 선언을 최상단으로 올려서 undefined를 출력한후 나중에 변수를 초기화 하여 값을 할당


/*
  중복선언
  동일한 변수명을 가진 변수를 한 스코프 내에서 여러번 선언하는 것을 말한다.
  이전에 선언된 변수 값을 무시하게 된다.
  마지막에 할당된 값이 저장되면서 코드를 혼동시킬수 있다.
*/
var x=10; 
var x=20; 
console.log(x);//20

/* 
  재선언
  이미 선언된 변수를 같은 스코프 내에서 다시 선언하는 것을 말한다.
*/
var y=10;
y=10;
console.log(y);//20


/* 
  재할당
  이미 선언된 변수에 새로운 값을 할당하는 것을 말한다.
*/
var x=10;
x=20;
console.log(x);

/* 
  스코프 : 범위
  블록스코프
  지역스코프
  전역스코프
*/

/* 
  변수 이름 규칙(=식별자 규칙)
  - 식별자 : 이름을 붙일때 사용하는 단어(변수명, 함수명, 클래스명...)
  - 키워드(예약어) 사용불가능 - 특별한 역할을 이미 하고 있는 단어(let, var, const, void, return, for, while, class...)
  - 숫자로 시작하면 안된다
  - 특수문자는 _(언더바), $(달러)만 사용 가능
  - 공백문자(space bar) 사용할 수 없다

  Q)식별자에 단어 두개 이상 작성하고 싶은경우?
  A) camelCase
    ex) redApple, isWater
    snake_case
    ex) red_apple. is_water

  Q) 상수란?
  A) 프로그램이 실행되는 동안 값이 변하지 않는 데이터를 나타낸다
  한번 정의 되면 프로그램 실행중에는 변경되지 않아야함(고정된값)
  보통 대문자로 표기(개발자 커뮤니케이션내에서 국룰)

*/