<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
  <!-- jQuery CDN (ajax 간편하게 사용하고자 불러옴) -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

  <!-- Axios CDN -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
  <h1><%= title %></h1>
  <form name="register">
    <label for="name">이름</label>
    <input type="text" name="name" id="name" required/>
    <br />
    <span>성별</span>
    <!-- required 하나만써도 필수값 설정 가능 name값이 같은것들은 같이 설정된다  -->
    <input type="radio" name="gender" id="male" value="남자" required/>
    <label for="male">남자</label>
    <input type="radio" name="gender" id="female" value="여자"/>
    <label for="female">여자</label>
    <br />
    <button type="button" onclick="ajaxGet()">ajax로 get 방식 요청</button>
    <button type="button" onclick="ajaxPost()">ajax로 post 방식 요청</button>
    <br />
    <br />
    <button type="button" onclick="axiosGet()">axios로 get 방식 요청</button>
    <button type="button" onclick="axiosPost()">axios로 post 방식 요청</button>
    <br />
    <br />
    <button type="button" onclick="fetchGet()">fetch로 get 방식 요청</button>
    <button type="button" onclick="fetchPost()">fetch로 post 방식 요청</button>
  </form>
  <br />
  <br />
  <button onclick="getTodos()">외부 API를 이용해 TODO 불러오기</button>
  <div class="result"></div>
  <script>
    const resultBox = document.querySelector('.result');
    function ajaxGet(){
      // 폼 선택하기
      const form = document.forms['register'];
      
      // 폼요소의 값을 추출하기
      // console.dir(form);// dir : 트리구조로 볼수잇음
      // console.dir(form.name);
      // console.dir(form.gender);
      const data={
        name : form.name.value,
        gender : form.gender.value
      }
      console.log(data);
      
      // ajax 비동기 통신(GET방식)
      // 서버의 index.js 파일로 유저가 브라우저에 입력한 값을 보내기
      $.ajax({
        type : 'GET',
        url : '/ajax',
        data, //data : data // data : {name : form.name.value, gender : form.gender.value}
        success : function(data){
          console.log(data);
          resultBox.textContent = `GET / ajax 요청에 대한 응답완료! ${data.name}님은 ${data.gender}이시죠?`;
          resultBox.style.color='blue';
        }
      })
    }

    function ajaxPost(){
      const form = document.forms['register'];
      const data={
        name : form.name.value,
        gender : form.gender.value
      }
      $.ajax({
          type : 'POST',
          url : '/ajax',
          data,
          success : function(data){
            resultBox.textContent = `POST / ajax 요청에 대한 응답완료! ${data.name}님은 ${data.gender}이시죠?`;
            resultBox.style.color='red';
          }
        })
    }
  
    // async/await코드로 변경 (예외처리는 try-catch)
    async function axiosGet(){
      // 1. 이름 미입력시 이름을 입력해주세요 문구 출력
      // 2. 성별 미입력시 성별을 선택해주세요
      // 3. 이름과 성별이 모두 입력된다면 정상정으로 요청 날리기

      const form = document.forms['register'];
      const data={
        name : form.name.value,
        gender : form.gender.value
      }

      if(!form.name.checkValidity()){
        resultBox.textContent = '이름을 입력해주세요';
      }else if(!form.gender[0].checkValidity()){
        resultBox.textContent = '성별을 선택해주세요';
      }else{
        try {
          const res = await axios({
            method : 'GET',
            url : `./axios?name=${form.name.value}&gender=${form.gender.value}`,
          })
          console.log(res);
          console.log(res.data);
          const {name ,gender} = res.data;
          resultBox.textContent = `GET / axios 요청에 대한 응답완료! ${name}님은 ${gender}이시죠?`;
          resultBox.style.color='green';
          
        } catch (error) {
          console.error('Error',err);
          resultBox.textContent = '알수없는 에러 발생. 다시 시도해주세요!'
        }
      }
    }

    function axiosGet(){
      // 1. 이름 미입력시 이름을 입력해주세요 문구 출력
      // 2. 성별 미입력시 성별을 선택해주세요
      // 3. 이름과 성별이 모두 입력된다면 정상정으로 요청 날리기

      const form = document.forms['register'];
      const data={
        name : form.name.value,
        gender : form.gender.value
      }

      console.log(form.name.checkValidity());
      console.log(form.gender[0].checkValidity());
      console.log(form.gender[1].checkValidity());

      // radio type input은 둘 중 하나라도 check 되면 전부 true 출력, 아니면 false가 출력

      if(!form.name.checkValidity()){
        resultBox.textContent = '이름을 입력해주세요';
      }else if(!form.gender[0].checkValidity()){
        resultBox.textContent = '성별을 선택해주세요';
      }else{
        axios({
          method : 'GET',
          // 1. params 키를 이용하는 경우
          // url : './axios',
          // params : data,
  
          // 2. params 키를 이용하지 않는 다면 요청 url에 query string을 작성
          url : `./axios?name=${form.name.value}&gender=${form.gender.value}`,
  
        }).then(function(res){
          console.log(res); // 서버의 응답 결과를 부가적인 정보와 함께 출력
          console.log(res.data); // app.js의 res.send(req.query) 데이터가 담김
          console.log(res.status); // HTTP Status code(상태코드)
          console.log(res.headers); // 응답의 헤더?
          console.log(res.config); 
  
          const {name ,gender} = res.data;
          resultBox.textContent = `GET / axios 요청에 대한 응답완료! ${name}님은 ${gender}이시죠?`;
          resultBox.style.color='green';
        }).catch(function(err){
          console.error('Error',err);
          resultBox.textContent = '알수없는 에러 발생. 다시 시도해주세요!'
        })
      }

    }

    function axiosPost(){
      const form = document.forms['register'];
      const data={
        name : form.name.value,
        gender : form.gender.value
      }
      axios({
        method : 'POST',
        url : '/axios',
        data,
      }).then(function(res){
        console.log(res);
        const {name ,gender} = res.data;
        resultBox.textContent = `POST / axios 요청에 대한 응답완료! ${name}님은 ${gender}이시죠?`;
        resultBox.style.color='orange';
      })
    }
  
    function fetchGet(){
      const form = document.forms['register'];
      const urlQuety = `?name=${form.name.value}&gender=${form.gender.value}`;

      // fetch() 디폴트값이 get방식으로 동작
      // fetch(`fetch${urlQuety}`,{method: 'GET'})
      fetch(`fetch${urlQuety}`)
      .then((res)=>{
        console.log(res);
        return res.json(); // res 객체로부터 JSON 포맷의 응답을 js obj로 변환
      })
      .then((data)=>{
        console.log(data);
        resultBox.textContent = `POST / fetch 요청에 대한 응답완료! ${data.name}님은 ${data.gender}이시죠?`;
        resultBox.style.color='skyblue';
      })
    }
    
    function fetchPost() {
      console.log('click fetchPost btn!');
            
      // 폼 선택하기
      const form = document.forms['register'];

      // 서버로 보낼 데이터 양식 생성하기
      const data = {
          name: form.name.value,
          gender: form.gender.value
      };

      // fetch: POST 요청시 headers 옵션을 통해 JSON 포맷을 사용한다고 알려줘야 함
      // => body에서도 json 형식으로 데이터를 바꾸어 보내야 함.
      fetch(`/fetch`, {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify(data), // js obj to json
      })
          .then((res) => {
              console.log(res);
              return res.json(); // res 객체로부터 JSON 포맷의 응답을 js obj로 변환
          })
          .then((data) => {
              console.log(data); // js obj
              resultBox.textContent 
                  = `POST /fetch 요청에 대한 응답 완료! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
              resultBox.style.color = 'hotpink';
          });
        }
  
    // 외부 API
    function getTodos(){
      fetch('https://jsonplaceholder.typicode.com/todos')
      .then(response => response.json())
      .then(json => console.log(json))
    }
  </script>
</body>
</html>